<?phprequire_once($_SERVER['DOCUMENT_ROOT'] . '/../lib/DatabaseAction.php');require_once($_SERVER['DOCUMENT_ROOT'] . '/../lib/simple/Paginate.php');class Action extends DatabaseAction {	var $__defaultPage = null;	var $__defaultAmount = null;	var $__defaultPageAmount = null;	function init() {		DatabaseAction::init();			$this->__defaultPage = 1;		$this->__defaultAmount = 20;		$this->__defaultPageAmount = 5;		$this->_tourGoodsCode = 'A013';	}	function prepare() {		if (!$this->page) {			$this->page = $this->__defaultPage;		}		if (!isset($this->amount)) {			$this->amount = $this->__defaultAmount;		}				$this->member_no = mb_convert_kana($this->member_no, 'n', 'EUC-JP');		$this->zip1 = mb_convert_kana($this->zip1, 'n', 'EUC-JP');		$this->zip2 = mb_convert_kana($this->zip2, 'n', 'EUC-JP');		$this->tel1 = mb_convert_kana($this->tel1, 'n', 'EUC-JP');		$this->tel2 = mb_convert_kana($this->tel2, 'n', 'EUC-JP');		$this->tel3 = mb_convert_kana($this->tel3, 'n', 'EUC-JP');	}			function execute() {		unset($this->flgTour);		unset($this->flgNormal);		//森大輔CD用特別対応追加フラグ		unset($this->moriSp);		if(count($this->cart)=='1'){			if (in_array("FAMC-218", $this->cart['FAMC-218'])) {				$this->moriSp=1;			}		}		foreach($this->cart as $item) {			if($item['category_code'] == $this->_tourGoodsCode) {				$this->flgTour = 1;			} else {				$this->flgNormal = 1;			} 		}		if ($this->payment == '代金引換') {			if($this->flgTour == 1) {				$this->carriageTour = 1000;			} else {				$this->carriageTour = 0;			}			if($this->flgNormal == 1) {				$this->carriage = 1000;			} else {				$this->carriage = 0;			}			if($this->moriSp == 1){				$this->carriageTour = 0;				$this->carriage = 0;			}		}		elseif ($this->payment == '郵便振替') {			if($this->flgTour == 1) {				$this->carriageTour = 700;			} else {				$this->carriageTour = 0;			}			if($this->flgNormal == 1) {				$this->carriage = 700;			} else {				$this->carriage = 0;			}		}		elseif($this->payment == 'クレジットカード') {			if($this->flgTour == 1) {				$this->carriageTour = 800;			} else {				$this->carriageTour = 0;			}			if($this->flgNormal == 1) {				$this->carriage = 800;			} else {				$this->carriage = 0;			}			if($this->moriSp == 1){				$this->carriageTour = 0;				$this->carriage = 0;			}		}		elseif ($this->payment == 'コンビニ決済') {			$this->paygentCarriage = 700;			if($this->flgTour == 1) {				$this->carriageTour = 700;								if($this->total + $this->carriageTour >= 10000) {					$this->carriageTour += 240;					$this->paygentFee = 240;				} else {					$this->carriageTour += 200;					$this->paygentFee = 200;				}			} else {				$this->carriageTour = 0;			}			if($this->flgNormal == 1) {				$this->carriage = 700;				if($this->total + $this->carriage >= 10000) {					$this->carriage += 240;					$this->paygentFee = 240;				} else {					$this->carriage += 200;					$this->paygentFee = 200;				}			} else {				$this->carriage = 0;			}		}		elseif ($this->payment == 'カード決済（ペイジェント）') {			if($this->flgTour == 1) {				$this->carriageTour = 800;			} else {				$this->carriageTour = 0;			}			if($this->flgNormal == 1) {				$this->carriage = 800;			} else {				$this->carriage = 0;			}		}		elseif ($this->payment == 'ATM決済') {			$this->paygentCarriage = 700;			if($this->flgTour == 1) {				$this->carriageTour = 700;				if($this->total + $this->carriageTour >= 10000) {					$this->carriageTour += 240;					$this->paygentFee = 240;				} else {					$this->carriageTour += 200;					$this->paygentFee = 200;			}			} else {				$this->carriageTour = 0;			}			if($this->flgNormal == 1) {				$this->carriage = 700;				if($this->total + $this->carriage >= 10000) {					$this->carriage += 240;					$this->paygentFee = 240;				} else {					$this->carriage += 200;					$this->paygentFee = 200;				}			} else {				$this->carriage = 0;			}		}		else if ($this->payment == '銀行ネット決済') {			$this->paygentCarriage = 700;			if($this->flgTour == 1) {				$this->carriageTour = 700;				if($this->total + $this->carriageTour >= 10000) {					$this->carriageTour += 240;					$this->paygentFee = 240;				} else {					$this->carriageTour += 200;					$this->paygentFee = 200;				}			} else {				$this->carriageTour = 0;			}			if($this->flgNormal == 1) {				$this->carriage = 700;				if($this->total + $this->carriage >= 10000) {					$this->carriage += 240;					$this->paygentFee = 240;				} else {					$this->carriage += 200;					$this->paygentFee = 200;				}			} else {				$this->carriage = 0;			}		}		$this->carriageTotal = $this->carriage + $this->carriageTour;		$convenience_stores = $this->dbTable("convenience_store", "convenience_store_no","convenience_store_no");		$this->units = array(			"convenience_stores" => $convenience_stores		);		$this->valid_term_month = array();		for($i = 0; $i < 12; $i++) {			$this->valid_term_month[] = sprintf('%02d', $i + 1);		}		$this->valid_term_year = array();		$year = date('y');		for($i = 0; $i < 15; $i++) {			$this->valid_term_year[] =  sprintf('%02d', $year + $i);		}	}	function validate() {		$cart = $this->cart;		$this->errors = array();				if (!is_array($cart) || @count($cart) <= 0) {			$this->errors['cart'] = 'カートに商品がございません。';		}		if (!$this->payment) {			$this->errors['payment'] = '選択してください。';		}		$this->member_no = str_replace(array(" ","　"), "", $this->member_no);		if (empty($this->member_no) && $this->payment != 'クレジットカード') {		} elseif(!$this->isNumber($this->member_no) || mb_strlen($this->member_no) != 8) {			$this->errors['member_no'] = '半角数字8桁で入力してください';		} elseif(!$this->member_no && $this->payment == 'クレジットカード') {			$this->errors['member_no'] = 'BariBariCrewカードを利用する場合は入力が必要です';		}		$this->last_name = str_replace(array(" ","　"), "", $this->last_name);		$this->first_name = str_replace(array(" ","　"), "", $this->first_name);		if (!$this->last_name || !$this->first_name) {			$this->errors['name'] = '入力してください。';		}		$this->last_kana = str_replace(array(" ","　"), "", $this->last_kana);		$this->first_kana = str_replace(array(" ","　"), "", $this->first_kana);		if (!$this->last_kana || !$this->first_kana) {			$this->errors['kana'] = '入力してください。';		}elseif(!$this->isKatakana($this->last_kana) || !$this->isKatakana($this->first_kana)){			$this->errors['kana'] = 'カタカナで入力してください。';		}		$this->zip1 = str_replace(array(" ","　"), "", $this->zip1);		$this->zip2 = str_replace(array(" ","　"), "", $this->zip2);		if (!$this->zip1 || !$this->zip2) {			$this->errors['zip'] = '入力してください。';		}elseif (!$this->isNumber($this->zip1) || !$this->isNumber($this->zip2)) {			$this->errors['zip'] = '半角数字で入力してください。';		}		$this->address1 = str_replace(array(" ","　"), "", $this->address1);		if (!$this->address1) {			$this->errors['address'] = '入力してください。';		}		$this->tel1 = str_replace(array(" ","　"), "", $this->tel1);		$this->tel2 = str_replace(array(" ","　"), "", $this->tel2);		$this->tel3 = str_replace(array(" ","　"), "", $this->tel3);		$this->tel = sprintf('%s-%s-%s', $this->tel1, $this->tel2, $this->tel3);		if (!$this->tel1 || !$this->tel2 || !$this->tel3) {			$this->errors['tel'] = '入力してください。';		}elseif (!$this->isNumber($this->tel1 . $this->tel2 . $this->tel3)) {			$this->errors['tel'] = '形式が正しくありません。';		}elseif (!$this->isTel($this->tel)) {			$this->errors['tel'] = '形式が正しくありません。';		}		$this->mail = str_replace(array(" ","　"), "", $this->mail);		if (!$this->mail) {			$this->errors['mail'] = '入力してください。';		}elseif (!$this->isMail($this->mail)) {			$this->errors['mail'] = '形式が正しくありません。';		}elseif ($this->mail != $this->confirm ) {			$this->errors['mail'] = '確認入力と一致していません。';		}		if (count($this->errors)) {			return 'cart';		}		return true;	}}?>